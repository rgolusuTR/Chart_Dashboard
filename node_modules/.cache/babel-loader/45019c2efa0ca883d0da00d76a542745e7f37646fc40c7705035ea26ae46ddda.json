{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\0143586\\\\.vscode\\\\work\\\\chart-dashboard\\\\src\\\\components\\\\FullChartView.tsx\";\nimport React from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from \"chart.js\";\nimport { wordsToReviewData, misspellingsData, totalCountsData, chartColors } from \"../data/chartData\";\nimport \"./FullChartView.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\nconst FullChartView = ({\n  chartType,\n  onClose\n}) => {\n  const getChartData = () => {\n    switch (chartType) {\n      case \"wordsToReview\":\n        return {\n          labels: wordsToReviewData.map(item => item.month),\n          datasets: [{\n            label: \"Legal\",\n            data: wordsToReviewData.map(item => item.legal),\n            backgroundColor: chartColors.legal\n          }, {\n            label: \"Legal UK\",\n            data: wordsToReviewData.map(item => item.legalUK),\n            backgroundColor: chartColors.legalUK\n          }, {\n            label: \"TR Canada\",\n            data: wordsToReviewData.map(item => item.trCanada),\n            backgroundColor: chartColors.trCanada\n          }, {\n            label: \"Tax & Accounting\",\n            data: wordsToReviewData.map(item => item.taxAccounting),\n            backgroundColor: chartColors.taxAccounting\n          }, {\n            label: \"Thomson Reuters\",\n            data: wordsToReviewData.map(item => item.thomsonReuters),\n            backgroundColor: chartColors.thomsonReuters\n          }]\n        };\n      case \"misspellings\":\n        return {\n          labels: misspellingsData.map(item => item.month),\n          datasets: [{\n            label: \"Legal\",\n            data: misspellingsData.map(item => item.legal),\n            backgroundColor: chartColors.legal\n          }, {\n            label: \"Legal UK\",\n            data: misspellingsData.map(item => item.legalUK),\n            backgroundColor: chartColors.legalUK\n          }, {\n            label: \"TR Canada\",\n            data: misspellingsData.map(item => item.trCanada),\n            backgroundColor: chartColors.trCanada\n          }, {\n            label: \"Tax & Accounting\",\n            data: misspellingsData.map(item => item.taxAccounting),\n            backgroundColor: chartColors.taxAccounting\n          }, {\n            label: \"Thomson Reuters\",\n            data: misspellingsData.map(item => item.thomsonReuters),\n            backgroundColor: chartColors.thomsonReuters\n          }]\n        };\n      case \"totalCounts\":\n        return {\n          labels: totalCountsData.map(item => item.month),\n          datasets: [{\n            label: \"Misspellings\",\n            data: totalCountsData.map(item => item.misspellings),\n            backgroundColor: chartColors.misspellings\n          }, {\n            label: \"Words to Review\",\n            data: totalCountsData.map(item => item.wordsToReview),\n            backgroundColor: chartColors.wordsToReview\n          }, {\n            label: \"Approved Words\",\n            data: totalCountsData.map(item => item.approvedWords),\n            backgroundColor: chartColors.approvedWords\n          }]\n        };\n      default:\n        return {\n          labels: [],\n          datasets: []\n        };\n    }\n  };\n  const getChartTitle = () => {\n    switch (chartType) {\n      case \"wordsToReview\":\n        return \"Words to Review Count By Monthly\";\n      case \"misspellings\":\n        return \"Misspellings Count By Monthly\";\n      case \"totalCounts\":\n        return \"Total Monthly Counts Across All 5 Websites\";\n      default:\n        return \"\";\n    }\n  };\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        position: \"bottom\",\n        labels: {\n          padding: 20,\n          usePointStyle: true\n        }\n      },\n      title: {\n        display: true,\n        text: getChartTitle(),\n        font: {\n          size: 18,\n          weight: \"bold\"\n        },\n        padding: {\n          top: 10,\n          bottom: 30\n        }\n      }\n    },\n    scales: {\n      x: {\n        title: {\n          display: true,\n          text: \"Month\"\n        }\n      },\n      y: {\n        title: {\n          display: true,\n          text: \"Count\"\n        },\n        beginAtZero: true\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"full-chart-overlay\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"full-chart-modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"close-btn\",\n        onClick: onClose,\n        children: \"\\xD7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"full-chart-container\",\n        children: /*#__PURE__*/_jsxDEV(Bar, {\n          data: getChartData(),\n          options: options\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 184,\n    columnNumber: 5\n  }, this);\n};\n_c = FullChartView;\nexport default FullChartView;\nvar _c;\n$RefreshReg$(_c, \"FullChartView\");","map":{"version":3,"names":["React","Bar","Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","wordsToReviewData","misspellingsData","totalCountsData","chartColors","jsxDEV","_jsxDEV","register","FullChartView","chartType","onClose","getChartData","labels","map","item","month","datasets","label","data","legal","backgroundColor","legalUK","trCanada","taxAccounting","thomsonReuters","misspellings","wordsToReview","approvedWords","getChartTitle","options","responsive","maintainAspectRatio","plugins","legend","position","padding","usePointStyle","title","display","text","font","size","weight","top","bottom","scales","x","y","beginAtZero","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/0143586/.vscode/work/chart-dashboard/src/components/FullChartView.tsx"],"sourcesContent":["import React from \"react\";\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from \"chart.js\";\r\nimport { ChartType } from \"../App\";\r\nimport {\r\n  wordsToReviewData,\r\n  misspellingsData,\r\n  totalCountsData,\r\n  chartColors,\r\n} from \"../data/chartData\";\r\nimport \"./FullChartView.css\";\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\ninterface FullChartViewProps {\r\n  chartType: ChartType;\r\n  onClose: () => void;\r\n}\r\n\r\nconst FullChartView: React.FC<FullChartViewProps> = ({\r\n  chartType,\r\n  onClose,\r\n}) => {\r\n  const getChartData = () => {\r\n    switch (chartType) {\r\n      case \"wordsToReview\":\r\n        return {\r\n          labels: wordsToReviewData.map((item) => item.month),\r\n          datasets: [\r\n            {\r\n              label: \"Legal\",\r\n              data: wordsToReviewData.map((item) => item.legal),\r\n              backgroundColor: chartColors.legal,\r\n            },\r\n            {\r\n              label: \"Legal UK\",\r\n              data: wordsToReviewData.map((item) => item.legalUK),\r\n              backgroundColor: chartColors.legalUK,\r\n            },\r\n            {\r\n              label: \"TR Canada\",\r\n              data: wordsToReviewData.map((item) => item.trCanada),\r\n              backgroundColor: chartColors.trCanada,\r\n            },\r\n            {\r\n              label: \"Tax & Accounting\",\r\n              data: wordsToReviewData.map((item) => item.taxAccounting),\r\n              backgroundColor: chartColors.taxAccounting,\r\n            },\r\n            {\r\n              label: \"Thomson Reuters\",\r\n              data: wordsToReviewData.map((item) => item.thomsonReuters),\r\n              backgroundColor: chartColors.thomsonReuters,\r\n            },\r\n          ],\r\n        };\r\n      case \"misspellings\":\r\n        return {\r\n          labels: misspellingsData.map((item) => item.month),\r\n          datasets: [\r\n            {\r\n              label: \"Legal\",\r\n              data: misspellingsData.map((item) => item.legal),\r\n              backgroundColor: chartColors.legal,\r\n            },\r\n            {\r\n              label: \"Legal UK\",\r\n              data: misspellingsData.map((item) => item.legalUK),\r\n              backgroundColor: chartColors.legalUK,\r\n            },\r\n            {\r\n              label: \"TR Canada\",\r\n              data: misspellingsData.map((item) => item.trCanada),\r\n              backgroundColor: chartColors.trCanada,\r\n            },\r\n            {\r\n              label: \"Tax & Accounting\",\r\n              data: misspellingsData.map((item) => item.taxAccounting),\r\n              backgroundColor: chartColors.taxAccounting,\r\n            },\r\n            {\r\n              label: \"Thomson Reuters\",\r\n              data: misspellingsData.map((item) => item.thomsonReuters),\r\n              backgroundColor: chartColors.thomsonReuters,\r\n            },\r\n          ],\r\n        };\r\n      case \"totalCounts\":\r\n        return {\r\n          labels: totalCountsData.map((item) => item.month),\r\n          datasets: [\r\n            {\r\n              label: \"Misspellings\",\r\n              data: totalCountsData.map((item) => item.misspellings),\r\n              backgroundColor: chartColors.misspellings,\r\n            },\r\n            {\r\n              label: \"Words to Review\",\r\n              data: totalCountsData.map((item) => item.wordsToReview),\r\n              backgroundColor: chartColors.wordsToReview,\r\n            },\r\n            {\r\n              label: \"Approved Words\",\r\n              data: totalCountsData.map((item) => item.approvedWords),\r\n              backgroundColor: chartColors.approvedWords,\r\n            },\r\n          ],\r\n        };\r\n      default:\r\n        return { labels: [], datasets: [] };\r\n    }\r\n  };\r\n\r\n  const getChartTitle = () => {\r\n    switch (chartType) {\r\n      case \"wordsToReview\":\r\n        return \"Words to Review Count By Monthly\";\r\n      case \"misspellings\":\r\n        return \"Misspellings Count By Monthly\";\r\n      case \"totalCounts\":\r\n        return \"Total Monthly Counts Across All 5 Websites\";\r\n      default:\r\n        return \"\";\r\n    }\r\n  };\r\n\r\n  const options = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    plugins: {\r\n      legend: {\r\n        position: \"bottom\" as const,\r\n        labels: {\r\n          padding: 20,\r\n          usePointStyle: true,\r\n        },\r\n      },\r\n      title: {\r\n        display: true,\r\n        text: getChartTitle(),\r\n        font: {\r\n          size: 18,\r\n          weight: \"bold\" as const,\r\n        },\r\n        padding: {\r\n          top: 10,\r\n          bottom: 30,\r\n        },\r\n      },\r\n    },\r\n    scales: {\r\n      x: {\r\n        title: {\r\n          display: true,\r\n          text: \"Month\",\r\n        },\r\n      },\r\n      y: {\r\n        title: {\r\n          display: true,\r\n          text: \"Count\",\r\n        },\r\n        beginAtZero: true,\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div className=\"full-chart-overlay\">\r\n      <div className=\"full-chart-modal\">\r\n        <button className=\"close-btn\" onClick={onClose}>\r\n          ×\r\n        </button>\r\n        <div className=\"full-chart-container\">\r\n          <Bar data={getChartData()} options={options} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FullChartView;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}